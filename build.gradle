import net.neoforged.gradleutils.PomUtilsExtension.License

plugins {
    alias(libs.plugins.gradleutils)
}

allprojects { project ->
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    group 'net.neoforged.accesstransformers'

    version = gradleutils.version
    gradleutils.setupSigning(project)
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'neoforged'
            url = 'https://maven.neoforged.net/releases/'
        }
    }

    java {
        modularity.inferModulePath = true
        withSourcesJar()
        toolchain.languageVersion = JavaLanguageVersion.of(21)
    }
}

subprojects { proj ->
    publishing {
        publications {
            mavenJava(MavenPublication) {
                gradleutils.sign(it)
                from components.java
                artifactId = "at-${proj.name}"
                pom {
                    name = "Access Transformers $proj"
                    description = 'Transforms class member access based on specification files'
                    pomUtils.githubRepo(it, 'AccessTransformers')
                    pomUtils.license(it, License.MIT)
                    pomUtils.neoForgedDeveloper(it)
                }
            }
        }
        repositories {
            maven gradleutils.publishingMaven
        }
    }
}

group 'net.neoforged'

println('Version: ' + version)

sourceSets {
    testJars
}

jar.manifest = manifest {
    attributes([
            'Specification-Title': 'accesstransformers',
            'Specification-Vendor': 'neoforged',
            'Specification-Version': '1', // Currently version 1 of the accesstransformer specification
            'Implementation-Title': project.name,
            'Implementation-Version': "${project.version}+${gradleutils.gitInfo.abbreviatedId}",
            'Implementation-Vendor': 'neoforged',
            'Git-Commit': gradleutils.gitInfo.abbreviatedId
    ])
}

tasks.register('testsJar', Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

changelog {
    from '10.0'
}

build.dependsOn testsJar

dependencies {
    testImplementation(libs.junit.api)
    testImplementation(libs.powermock)
    testImplementation(libs.bsl)
    testImplementation(libs.sjh)
    testImplementation(libs.gson)
    testImplementation(project(':modlauncher'))
    testImplementation(libs.jopt5)
    testImplementation(libs.bundles.log4j)
    testRuntimeOnly(libs.junit.engine)

    api(libs.slf4j)
    api(libs.bundles.asm)
    api(project(':parser'))
}

// Build the module path manually because Gradle won't do it for non-modular projects.
// Feel free to replace by a better way, I just wanted the tests to run.
import java.util.stream.Collectors
def buildModulePath() {
    project.configurations.testRuntimeClasspath.resolve()*.toString().stream().filter {
        it.contains('asm') || it.contains('modlauncher') || it.contains('bootstraplauncher') || it.contains('securejarhandler')
    }.collect(Collectors.joining(File.pathSeparator))
}

test {
    useJUnitPlatform()
    forkEvery 1
    jvmArgs(
            '--add-opens', 'java.base/java.lang.invoke=cpw.mods.securejarhandler',
            '-p', buildModulePath()
    )
}

test.dependsOn(testJarsClasses)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = "accesstransformers"
            gradleutils.sign(it)
            pom {
                name = 'Access Transformers'
                description = 'Transforms class member access based on specification files'
                pomUtils.githubRepo(it, 'AccessTransformers')
                pomUtils.license(it, License.MIT)

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'DemonWav'
                        name = 'DemonWav'
                    }
                    developer {
                        id = 'neoforged'
                        name = 'NeoForged'
                        email = 'contact@neoforged.net'
                        url = 'https://github.com/NeoForged/'
                    }
                }
            }
        }
    }
    repositories {
        maven gradleutils.publishingMaven
    }
}
